// @generated by protoc-gen-es v1.9.0 with parameter "target=ts,ts_nocheck=false"
// @generated from file github.com/aperturerobotics/controllerbus/directive/directive.proto (package directive, syntax proto3)
/* eslint-disable */

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf'
import { Message, proto3 } from '@bufbuild/protobuf'

/**
 * DirectiveInfo contains directive information in protobuf form.
 *
 * @generated from message directive.DirectiveInfo
 */
export class DirectiveInfo extends Message<DirectiveInfo> {
  /**
   * Name is the directive name.
   *
   * @generated from field: string name = 1;
   */
  name = ''

  /**
   * DebugVals contains the directive debug values.
   *
   * @generated from field: repeated directive.ProtoDebugValue debug_vals = 2;
   */
  debugVals: ProtoDebugValue[] = []

  constructor(data?: PartialMessage<DirectiveInfo>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'directive.DirectiveInfo'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 2,
      name: 'debug_vals',
      kind: 'message',
      T: ProtoDebugValue,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DirectiveInfo {
    return new DirectiveInfo().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DirectiveInfo {
    return new DirectiveInfo().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DirectiveInfo {
    return new DirectiveInfo().fromJsonString(jsonString, options)
  }

  static equals(
    a: DirectiveInfo | PlainMessage<DirectiveInfo> | undefined,
    b: DirectiveInfo | PlainMessage<DirectiveInfo> | undefined,
  ): boolean {
    return proto3.util.equals(DirectiveInfo, a, b)
  }
}

/**
 * DirectiveState contains directive info and state info in protobuf form.
 *
 * @generated from message directive.DirectiveState
 */
export class DirectiveState extends Message<DirectiveState> {
  /**
   * Info is the directive info.
   *
   * TODO result info
   *
   * @generated from field: directive.DirectiveInfo info = 1;
   */
  info?: DirectiveInfo

  constructor(data?: PartialMessage<DirectiveState>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'directive.DirectiveState'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'info', kind: 'message', T: DirectiveInfo },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DirectiveState {
    return new DirectiveState().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DirectiveState {
    return new DirectiveState().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DirectiveState {
    return new DirectiveState().fromJsonString(jsonString, options)
  }

  static equals(
    a: DirectiveState | PlainMessage<DirectiveState> | undefined,
    b: DirectiveState | PlainMessage<DirectiveState> | undefined,
  ): boolean {
    return proto3.util.equals(DirectiveState, a, b)
  }
}

/**
 * ProtoDebugValue is a debug value.
 *
 * @generated from message directive.ProtoDebugValue
 */
export class ProtoDebugValue extends Message<ProtoDebugValue> {
  /**
   * Key is the debug value key.
   *
   * @generated from field: string key = 1;
   */
  key = ''

  /**
   * Values are the debug value values.
   *
   * @generated from field: repeated string values = 2;
   */
  values: string[] = []

  constructor(data?: PartialMessage<ProtoDebugValue>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'directive.ProtoDebugValue'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'key', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 2,
      name: 'values',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): ProtoDebugValue {
    return new ProtoDebugValue().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): ProtoDebugValue {
    return new ProtoDebugValue().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): ProtoDebugValue {
    return new ProtoDebugValue().fromJsonString(jsonString, options)
  }

  static equals(
    a: ProtoDebugValue | PlainMessage<ProtoDebugValue> | undefined,
    b: ProtoDebugValue | PlainMessage<ProtoDebugValue> | undefined,
  ): boolean {
    return proto3.util.equals(ProtoDebugValue, a, b)
  }
}
