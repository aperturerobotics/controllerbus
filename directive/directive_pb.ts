// @generated by protoc-gen-es-lite unknown with parameter "target=ts,ts_nocheck=false"
// @generated from file github.com/aperturerobotics/controllerbus/directive/directive.proto (package directive, syntax proto3)
/* eslint-disable */

import {
  createMessageType,
  Message,
  MessageType,
  PartialFieldInfo,
} from '@aptre/protobuf-es-lite'

export const protobufPackage = 'directive'

/**
 * ProtoDebugValue is a debug value.
 *
 * @generated from message directive.ProtoDebugValue
 */
export interface ProtoDebugValue extends Message<ProtoDebugValue> {
  /**
   * Key is the debug value key.
   *
   * @generated from field: string key = 1;
   */
  key?: string
  /**
   * Values are the debug value values.
   *
   * @generated from field: repeated string values = 2;
   */
  values?: string[]
}

export const ProtoDebugValue: MessageType<ProtoDebugValue> = createMessageType({
  typeName: 'directive.ProtoDebugValue',
  fields: [
    { no: 1, name: 'key', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 2,
      name: 'values',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
  ] as readonly PartialFieldInfo[],
  packedByDefault: true,
})

/**
 * DirectiveInfo contains directive information in protobuf form.
 *
 * @generated from message directive.DirectiveInfo
 */
export interface DirectiveInfo extends Message<DirectiveInfo> {
  /**
   * Name is the directive name.
   *
   * @generated from field: string name = 1;
   */
  name?: string
  /**
   * DebugVals contains the directive debug values.
   *
   * @generated from field: repeated directive.ProtoDebugValue debug_vals = 2;
   */
  debugVals?: ProtoDebugValue[]
}

export const DirectiveInfo: MessageType<DirectiveInfo> = createMessageType({
  typeName: 'directive.DirectiveInfo',
  fields: [
    { no: 1, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 2,
      name: 'debug_vals',
      kind: 'message',
      T: () => ProtoDebugValue,
      repeated: true,
    },
  ] as readonly PartialFieldInfo[],
  packedByDefault: true,
})

/**
 * DirectiveState contains directive info and state info in protobuf form.
 *
 * @generated from message directive.DirectiveState
 */
export interface DirectiveState extends Message<DirectiveState> {
  /**
   * Info is the directive info.
   *
   * TODO result info
   *
   * @generated from field: directive.DirectiveInfo info = 1;
   */
  info?: DirectiveInfo
}

export const DirectiveState: MessageType<DirectiveState> = createMessageType({
  typeName: 'directive.DirectiveState',
  fields: [
    { no: 1, name: 'info', kind: 'message', T: () => DirectiveInfo },
  ] as readonly PartialFieldInfo[],
  packedByDefault: true,
})
