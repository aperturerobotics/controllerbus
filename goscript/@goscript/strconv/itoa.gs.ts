import * as $ from "@goscript/builtin/index.js";

// FormatUint returns the string representation of i in the given base,
// for 2 <= base <= 36. The result uses the lower-case letters 'a' to 'z'
// for digit values >= 10.
export function FormatUint(i: number, base: number): string {
	if (base < 2 || base > 36) {
		throw new Error("FormatUint: illegal base");
	}
	// JavaScript's toString() handles bases 2-36 natively
	return Math.floor(Math.abs(i)).toString(base);
}

// FormatInt returns the string representation of i in the given base,
// for 2 <= base <= 36. The result uses the lower-case letters 'a' to 'z'
// for digit values >= 10.
export function FormatInt(i: number, base: number): string {
	if (base < 2 || base > 36) {
		throw new Error("FormatInt: illegal base");
	}
	return Math.floor(i).toString(base);
}

// Itoa is equivalent to FormatInt(i, 10).
export function Itoa(i: number): string {
	return FormatInt(i, 10);
}

// AppendInt appends the string form of the integer i,
// as generated by FormatInt, to dst and returns the extended buffer.
export function AppendInt(dst: $.Bytes, i: number, base: number): $.Bytes {
	const str = FormatInt(i, base);
	return $.append(dst, ...$.stringToBytes(str)!);
}

// AppendUint appends the string form of the unsigned integer i,
// as generated by FormatUint, to dst and returns the extended buffer.
export function AppendUint(dst: $.Bytes, i: number, base: number): $.Bytes {
	const str = FormatUint(i, base);
	return $.append(dst, ...$.stringToBytes(str)!);
} 