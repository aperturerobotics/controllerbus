// @generated by protoc-gen-es v1.9.0 with parameter "target=ts,ts_nocheck=false"
// @generated from file github.com/aperturerobotics/controllerbus/bus/api/api.proto (package bus.api, syntax proto3)
/* eslint-disable */

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf'
import { Message, proto3 } from '@bufbuild/protobuf'
import { Info } from '../../controller/controller_pb.js'
import { DirectiveState } from '../../directive/directive_pb.js'

/**
 * Config are configuration arguments.
 *
 * @generated from message bus.api.Config
 */
export class Config extends Message<Config> {
  /**
   * EnableExecController enables the exec controller API.
   *
   * @generated from field: bool enable_exec_controller = 1;
   */
  enableExecController = false

  constructor(data?: PartialMessage<Config>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bus.api.Config'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'enable_exec_controller',
      kind: 'scalar',
      T: 8 /* ScalarType.BOOL */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): Config {
    return new Config().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): Config {
    return new Config().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): Config {
    return new Config().fromJsonString(jsonString, options)
  }

  static equals(
    a: Config | PlainMessage<Config> | undefined,
    b: Config | PlainMessage<Config> | undefined,
  ): boolean {
    return proto3.util.equals(Config, a, b)
  }
}

/**
 * GetBusInfoRequest is the request type for GetBusInfo.
 *
 * @generated from message bus.api.GetBusInfoRequest
 */
export class GetBusInfoRequest extends Message<GetBusInfoRequest> {
  constructor(data?: PartialMessage<GetBusInfoRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bus.api.GetBusInfoRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetBusInfoRequest {
    return new GetBusInfoRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetBusInfoRequest {
    return new GetBusInfoRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetBusInfoRequest {
    return new GetBusInfoRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetBusInfoRequest | PlainMessage<GetBusInfoRequest> | undefined,
    b: GetBusInfoRequest | PlainMessage<GetBusInfoRequest> | undefined,
  ): boolean {
    return proto3.util.equals(GetBusInfoRequest, a, b)
  }
}

/**
 * GetBusInfoResponse is the response type for GetBusInfo.
 *
 * @generated from message bus.api.GetBusInfoResponse
 */
export class GetBusInfoResponse extends Message<GetBusInfoResponse> {
  /**
   * RunningControllers is the list of running controllers.
   *
   * @generated from field: repeated controller.Info running_controllers = 1;
   */
  runningControllers: Info[] = []

  /**
   * RunningDirectives is the list of running directives.
   *
   * @generated from field: repeated directive.DirectiveState running_directives = 2;
   */
  runningDirectives: DirectiveState[] = []

  constructor(data?: PartialMessage<GetBusInfoResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bus.api.GetBusInfoResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'running_controllers',
      kind: 'message',
      T: Info,
      repeated: true,
    },
    {
      no: 2,
      name: 'running_directives',
      kind: 'message',
      T: DirectiveState,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetBusInfoResponse {
    return new GetBusInfoResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetBusInfoResponse {
    return new GetBusInfoResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetBusInfoResponse {
    return new GetBusInfoResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetBusInfoResponse | PlainMessage<GetBusInfoResponse> | undefined,
    b: GetBusInfoResponse | PlainMessage<GetBusInfoResponse> | undefined,
  ): boolean {
    return proto3.util.equals(GetBusInfoResponse, a, b)
  }
}
