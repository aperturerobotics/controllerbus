// @generated by protoc-gen-es-starpc none with parameter "target=ts,ts_nocheck=false"
// @generated from file github.com/aperturerobotics/controllerbus/bus/api/api.proto (package bus.api, syntax proto3)
/* eslint-disable */

import { GetBusInfoRequest, GetBusInfoResponse } from './api_pb.js'
import { MethodKind } from '@bufbuild/protobuf'
import {
  ExecControllerRequest,
  ExecControllerResponse,
} from '../../controller/exec/exec_pb.js'
import { Message } from '@aptre/protobuf-es-lite'
import { buildDecodeMessageTransform, MessageStream, ProtoRpc } from 'starpc'

/**
 * ControllerBusService is a generic controller bus lookup api.
 *
 * @generated from service bus.api.ControllerBusService
 */
export const ControllerBusServiceDefinition = {
  typeName: 'bus.api.ControllerBusService',
  methods: {
    /**
     * GetBusInfo requests information about the controller bus.
     *
     * @generated from rpc bus.api.ControllerBusService.GetBusInfo
     */
    GetBusInfo: {
      name: 'GetBusInfo',
      I: GetBusInfoRequest,
      O: GetBusInfoResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ExecController executes a controller configuration on the bus.
     *
     * @generated from rpc bus.api.ControllerBusService.ExecController
     */
    ExecController: {
      name: 'ExecController',
      I: ExecControllerRequest,
      O: ExecControllerResponse,
      kind: MethodKind.ServerStreaming,
    },
  },
} as const

/**
 * ControllerBusService is a generic controller bus lookup api.
 *
 * @generated from service bus.api.ControllerBusService
 */
export interface ControllerBusService {
  /**
   * GetBusInfo requests information about the controller bus.
   *
   * @generated from rpc bus.api.ControllerBusService.GetBusInfo
   */
  GetBusInfo(
    request: Message<GetBusInfoRequest>,
    abortSignal?: AbortSignal,
  ): Promise<Message<GetBusInfoResponse>>

  /**
   * ExecController executes a controller configuration on the bus.
   *
   * @generated from rpc bus.api.ControllerBusService.ExecController
   */
  ExecController(
    request: Message<ExecControllerRequest>,
    abortSignal?: AbortSignal,
  ): MessageStream<ExecControllerResponse>
}

export const ControllerBusServiceServiceName =
  ControllerBusServiceDefinition.typeName

export class ControllerBusServiceClient implements ControllerBusService {
  private readonly rpc: ProtoRpc
  private readonly service: string
  constructor(rpc: ProtoRpc, opts?: { service?: string }) {
    this.service = opts?.service || ControllerBusServiceServiceName
    this.rpc = rpc
    this.GetBusInfo = this.GetBusInfo.bind(this)
    this.ExecController = this.ExecController.bind(this)
  }
  /**
   * GetBusInfo requests information about the controller bus.
   *
   * @generated from rpc bus.api.ControllerBusService.GetBusInfo
   */
  async GetBusInfo(
    request: Message<GetBusInfoRequest>,
    abortSignal?: AbortSignal,
  ): Promise<Message<GetBusInfoResponse>> {
    const requestMsg = GetBusInfoRequest.create(request)
    const result = await this.rpc.request(
      this.service,
      ControllerBusServiceDefinition.methods.GetBusInfo.name,
      GetBusInfoRequest.toBinary(requestMsg),
      abortSignal || undefined,
    )
    return GetBusInfoResponse.fromBinary(result)
  }

  /**
   * ExecController executes a controller configuration on the bus.
   *
   * @generated from rpc bus.api.ControllerBusService.ExecController
   */
  ExecController(
    request: Message<ExecControllerRequest>,
    abortSignal?: AbortSignal,
  ): MessageStream<ExecControllerResponse> {
    const requestMsg = ExecControllerRequest.create(request)
    const result = this.rpc.serverStreamingRequest(
      this.service,
      ControllerBusServiceDefinition.methods.ExecController.name,
      ExecControllerRequest.toBinary(requestMsg),
      abortSignal || undefined,
    )
    return buildDecodeMessageTransform(ExecControllerResponse)(result)
  }
}
