// @generated by protoc-gen-es-lite unknown with parameter "target=ts,ts_nocheck=false"
// @generated from file github.com/aperturerobotics/controllerbus/controller/configset/proto/configset.proto (package configset.proto, syntax proto3)
/* eslint-disable */

import {
  createMessageType,
  Message,
  MessageType,
  PartialFieldInfo,
} from '@aptre/protobuf-es-lite'

export const protobufPackage = 'configset.proto'

/**
 * ControllerConfig contains a controller configuration.
 *
 * protobuf-go-lite:disable-json
 *
 * @generated from message configset.proto.ControllerConfig
 */
export interface ControllerConfig extends Message<ControllerConfig> {
  /**
   * Id is the config ID.
   *
   * @generated from field: string id = 1;
   */
  id?: string
  /**
   * Rev is the revision number of the configuration.
   *
   * @generated from field: uint64 rev = 2;
   */
  rev?: bigint
  /**
   * Config is the configuration object.
   * Proto supports: protobuf (binary) and json (starting with {).
   * Json supports: protobuf (base64) and json (inline object).
   *
   * @generated from field: bytes config = 3;
   */
  config?: Uint8Array
}

export const ControllerConfig: MessageType<ControllerConfig> =
  createMessageType({
    typeName: 'configset.proto.ControllerConfig',
    fields: [
      { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
      { no: 2, name: 'rev', kind: 'scalar', T: 4 /* ScalarType.UINT64 */ },
      { no: 3, name: 'config', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
    ] as readonly PartialFieldInfo[],
    packedByDefault: true,
  })

/**
 * ConfigSet contains a configuration set.
 *
 * @generated from message configset.proto.ConfigSet
 */
export interface ConfigSet extends Message<ConfigSet> {
  /**
   * Configs contains the controller configurations.
   *
   * @generated from field: map<string, configset.proto.ControllerConfig> configs = 1;
   */
  configs?: { [key: string]: ControllerConfig }
}

export const ConfigSet: MessageType<ConfigSet> = createMessageType({
  typeName: 'configset.proto.ConfigSet',
  fields: [
    {
      no: 1,
      name: 'configs',
      kind: 'map',
      K: 9 /* ScalarType.STRING */,
      V: { kind: 'message', T: () => ControllerConfig },
    },
  ] as readonly PartialFieldInfo[],
  packedByDefault: true,
})
