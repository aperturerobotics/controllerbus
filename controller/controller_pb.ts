// @generated by protoc-gen-es v1.8.0 with parameter "target=ts,ts_nocheck=false"
// @generated from file github.com/aperturerobotics/controllerbus/controller/controller.proto (package controller, syntax proto3)
/* eslint-disable */

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf'
import { Message, proto3 } from '@bufbuild/protobuf'

/**
 * Info contains information about a controller.
 *
 * @generated from message controller.Info
 */
export class Info extends Message<Info> {
  /**
   * Id contains the identifier of the controller.
   *
   * @generated from field: string id = 1;
   */
  id = ''

  /**
   * Version contains the version string for the controller.
   *
   * @generated from field: string version = 2;
   */
  version = ''

  /**
   * Description contains a descriptive string about the controller.
   *
   * @generated from field: string description = 3;
   */
  description = ''

  constructor(data?: PartialMessage<Info>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'controller.Info'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'version', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 3,
      name: 'description',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): Info {
    return new Info().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): Info {
    return new Info().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): Info {
    return new Info().fromJsonString(jsonString, options)
  }

  static equals(
    a: Info | PlainMessage<Info> | undefined,
    b: Info | PlainMessage<Info> | undefined,
  ): boolean {
    return proto3.util.equals(Info, a, b)
  }
}
