// @generated by protoc-gen-es-lite unknown with parameter "target=ts,ts_nocheck=false"
// @generated from file github.com/aperturerobotics/controllerbus/controller/exec/exec.proto (package controller.exec, syntax proto3)
/* eslint-disable */

import type { MessageType, PartialFieldInfo } from '@aptre/protobuf-es-lite'
import {
  createEnumType,
  createMessageType,
  ScalarType,
} from '@aptre/protobuf-es-lite'
import { ConfigSet } from '../configset/proto/configset.pb.js'
import { Info } from '../controller.pb.js'

export const protobufPackage = 'controller.exec'

/**
 * ControllerStatus holds basic status for a controller.
 *
 * @generated from enum controller.exec.ControllerStatus
 */
export enum ControllerStatus {
  /**
   * ControllerStatus_UNKNOWN is unrecognized.
   *
   * @generated from enum value: ControllerStatus_UNKNOWN = 0;
   */
  ControllerStatus_UNKNOWN = 0,

  /**
   * ControllerStatus_CONFIGURING indicates the controller is configuring.
   *
   * @generated from enum value: ControllerStatus_CONFIGURING = 1;
   */
  ControllerStatus_CONFIGURING = 1,

  /**
   * ControllerStatus_RUNNING indicates the controller is running.
   *
   * @generated from enum value: ControllerStatus_RUNNING = 2;
   */
  ControllerStatus_RUNNING = 2,

  /**
   * ControllerStatus_ERROR indicates the controller is terminated with an error.
   *
   * @generated from enum value: ControllerStatus_ERROR = 3;
   */
  ControllerStatus_ERROR = 3,
}

// ControllerStatus_Enum is the enum type for ControllerStatus.
export const ControllerStatus_Enum = createEnumType(
  'controller.exec.ControllerStatus',
  [
    { no: 0, name: 'ControllerStatus_UNKNOWN' },
    { no: 1, name: 'ControllerStatus_CONFIGURING' },
    { no: 2, name: 'ControllerStatus_RUNNING' },
    { no: 3, name: 'ControllerStatus_ERROR' },
  ],
)

/**
 * ExecControllerRequest is a protobuf request to execute a controller.
 *
 * @generated from message controller.exec.ExecControllerRequest
 */
export interface ExecControllerRequest {
  /**
   * ConfigSet is the controller config set to execute.
   *
   * @generated from field: configset.proto.ConfigSet config_set = 1;
   */
  configSet?: ConfigSet
  /**
   * ConfigSetYaml is optionally the YAML form of config_set to parse.
   * Merged with config_set.
   *
   * @generated from field: string config_set_yaml = 2;
   */
  configSetYaml?: string
  /**
   * ConfigSetYamlOverwrite sets if the yaml portion overwrites the proto portion.
   *
   * @generated from field: bool config_set_yaml_overwrite = 3;
   */
  configSetYamlOverwrite?: boolean
}

// ExecControllerRequest contains the message type declaration for ExecControllerRequest.
export const ExecControllerRequest: MessageType<ExecControllerRequest> =
  createMessageType({
    typeName: 'controller.exec.ExecControllerRequest',
    fields: [
      { no: 1, name: 'config_set', kind: 'message', T: () => ConfigSet },
      { no: 2, name: 'config_set_yaml', kind: 'scalar', T: ScalarType.STRING },
      {
        no: 3,
        name: 'config_set_yaml_overwrite',
        kind: 'scalar',
        T: ScalarType.BOOL,
      },
    ] as readonly PartialFieldInfo[],
    packedByDefault: true,
  })

/**
 * ExecControllerResponse is a protobuf response stream.
 *
 * @generated from message controller.exec.ExecControllerResponse
 */
export interface ExecControllerResponse {
  /**
   * Id is the configset identifier for this status report.
   *
   * @generated from field: string id = 1;
   */
  id?: string
  /**
   * Status is the controller execution status.
   *
   * @generated from field: controller.exec.ControllerStatus status = 2;
   */
  status?: ControllerStatus
  /**
   * ControllerInfo may contain the running controller info.
   *
   * @generated from field: controller.Info controller_info = 3;
   */
  controllerInfo?: Info
  /**
   * ErrorInfo may contain the error information.
   *
   * @generated from field: string error_info = 4;
   */
  errorInfo?: string
}

// ExecControllerResponse contains the message type declaration for ExecControllerResponse.
export const ExecControllerResponse: MessageType<ExecControllerResponse> =
  createMessageType({
    typeName: 'controller.exec.ExecControllerResponse',
    fields: [
      { no: 1, name: 'id', kind: 'scalar', T: ScalarType.STRING },
      { no: 2, name: 'status', kind: 'enum', T: ControllerStatus_Enum },
      { no: 3, name: 'controller_info', kind: 'message', T: () => Info },
      { no: 4, name: 'error_info', kind: 'scalar', T: ScalarType.STRING },
    ] as readonly PartialFieldInfo[],
    packedByDefault: true,
  })
